variables:
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
jobs:
  - job: CppUnitTests
    condition: and(succeeded(), eq(variables.isMaster, 'true'))
    displayName: C++ Unit Tests
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macos-latest'
        windows:
          imageName: 'windows-latest'
    pool:
      vmImage: $(imageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.15.x'
    - bash: ci/install.sh
      displayName: Install Dependencies
      workingDirectory: $(Build.SourcesDirectory)
      env:
        AGENT_OS: $(Agent.OS)
    - bash: |
        npx haxe build-cpp.hxml -D reporter=buddy.reporting.XUnit2Reporter -D report-name=Engine-Tests-$(Agent.OS) --debug --no-traces
        ./bin/cpp/Tests-debug
      displayName: Engine Tests
      workingDirectory: $(Build.SourcesDirectory)/tests/unit
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: xUnit
        testResultsFiles: Engine-Tests-$(Agent.OS).xml
        searchFolder: $(Build.SourcesDirectory)/tests/unit
        testRunTitle: Engine Tests $(Agent.OS)
        buildPlatform: $(Agent.OS)
        failTaskOnFailedTests: true
    - bash: |
        bash <(curl -s https://codecov.io/bash) -f tests/unit/codecov.json
      displayName: Upload to codecov.io
      condition: succeededOrFailed()

  - job: JsUnitTests
    displayName: Js Unit Tests
    condition: and(succeeded(), eq(variables.isMaster, 'true'))
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.15.x'
    - bash: npm ci
      displayName: Install Dependencies
    - bash: |
        npx haxe build-js.hxml -D reporter=buddy.reporting.XUnit2Reporter -D report-name=Engine-Tests-Js --debug --no-traces
        node bin/js/main.js
      displayName: Engine Tests
      workingDirectory: $(Build.SourcesDirectory)/tests/unit
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: xUnit
        testResultsFiles: Engine-Tests-Js.xml
        searchFolder: $(Build.SourcesDirectory)/tests/unit
        testRunTitle: Engine Tests Js
        buildPlatform: Js
        failTaskOnFailedTests: true

  # - job: HashlinkUnitTests
  #   displayName: Hashlink Unit Tests
  #   pool:
  #     vmImage: 'windows-latest'
  #   steps:
  #   - bash: npm ci
  #     displayName: Install Dependencies
  #   - bash: |
  #       curl https://github.com/HaxeFoundation/hashlink/releases/download/1.11/hl-1.11.0-win.zip -O -J -L -o hl-1.11.0-win.zip
  #       unzip hl-1.11.0-win.zip
  #       export PATH=$PWD/hl-1.11.0-win:$PATH
  #       npx haxe build-hl.hxml -D reporter=buddy.reporting.XUnit2Reporter -D report-name=Engine-Tests-Hashlink --debug --no-traces
  #       hl bin/hl/main.hl
  #     displayName: Engine Tests Hashlink
  #     workingDirectory: $(Build.SourcesDirectory)/tests/unit
  #   - task: PublishTestResults@2
  #     condition: succeededOrFailed()
  #     inputs:
  #       testResultsFormat: xUnit
  #       testResultsFiles: Engine-Tests-Hashlink.xml
  #       searchFolder: $(Build.SourcesDirectory)/tests/unit
  #       testRunTitle: Engine Tests Hashlink
  #       buildPlatform: Hashlink
  #       failTaskOnFailedTests: true

  - job: ToolUnitTests
    displayName: Tool Unit Tests
    condition: and(succeeded(), eq(variables.isMaster, 'true'))
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.15.x'
    - bash: npm ci
      displayName: Install Dependencies
    - bash: npx haxe build.hxml -D reporter=buddy.reporting.XUnit2Reporter -D report-name=Tool-Tests --debug --no-traces
      displayName: Tool Unit Tests
      workingDirectory: $(Build.SourcesDirectory)/tests/tool
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: xUnit
        testResultsFiles: Tool-Tests.xml
        searchFolder: $(Build.SourcesDirectory)/tests/tool
        testRunTitle: Tool Unit Tests
        failTaskOnFailedTests: true

  - job: SystemTestsOgl3
    displayName: System Tests (OpenGL 3 Backend)
    condition: and(succeeded(), eq(variables.isMaster, 'true'))
    pool:
      name: Default
      demands:
        - Agent.OS -equals Linux
    steps:
    - bash: ci/install.sh
      displayName: Install Dependencies
      workingDirectory: $(Build.SourcesDirectory)
      env:
        AGENT_OS: $(Agent.OS)
    - bash: |       
        pip3 install -U pytest
        pip3 install -U pytest-subtests
        pip3 install -U pillow
        pip3 install -U pixelmatch
        python3 -m pytest -o junit_family=xunit2 --junit-xml test-ogl3-system.xml -s TestLinuxOGL3.py
      displayName: System Tests
      workingDirectory: $(Build.SourcesDirectory)/tests/system
      env:
        AGENT_OS: $(Agent.OS)
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: test-ogl3-system.xml
        searchFolder: $(Build.SourcesDirectory)/tests/system
        testRunTitle: System Tests $(Agent.OS)
        buildPlatform: $(Agent.OS)
        failTaskOnFailedTests: true

  - job: SystemTestsD3D11
    displayName: System Tests (D3D11 Backend)
    condition: and(succeeded(), eq(variables.isMaster, 'true'))
    pool:
      name: Default
      demands:
        - Agent.OS -equals Windows_NT
    steps:
    - task: ScreenResolutionUtility@1
      inputs:
        displaySettings: 'specific'
        width: '1920'
        height: '1080'
    - script: |
        npm ci
        
        python -m pip install --upgrade pip pytest pytest-subtests pillow pixelmatch d3dshot pywin32 numpy

        cd ((npx haxelib path hxcpp) 2>&1)[1]
        npm install lix
        cd tools/hxcpp
        npx haxe compile.hxml
      displayName: Install Dependencies
      workingDirectory: $(Build.SourcesDirectory)
      env:
        AGENT_OS: $(Agent.OS)
    - script: python -m pytest -o junit_family=xunit2 --junit-xml test-d3d11-system.xml -s TestWindowsD3D11.py
      displayName: System Tests
      workingDirectory: $(Build.SourcesDirectory)/tests/system
      env:
        AGENT_OS: $(Agent.OS)
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: test-d3d11-system.xml
        searchFolder: $(Build.SourcesDirectory)/tests/system
        testRunTitle: System Tests $(Agent.OS)
        buildPlatform: $(Agent.OS)
        failTaskOnFailedTests: true